services:
  db:
    image: postgres:15-alpine
    container_name: ops_craft_db
    env_file:
      - ${ENV_FILE:-.env}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # ports:
    #   - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    container_name: ops_craft_redis
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        APP_USER: ${APP_USER}
        APP_GROUP: ${APP_USER}
        APP_GID: ${APP_GID}
        APP_UID: ${APP_UID}
    container_name: ops_craft_backend
    env_file:
      - ${ENV_FILE:-.env}
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
    ports:
      - "8000:8000"
    volumes:
      # - ./backend:/app
      - script_storage:/app/scripts
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        APP_USER: ${APP_USER}
        APP_GROUP: ${APP_USER}
        APP_GID: ${APP_GID}
        APP_UID: ${APP_UID}
    container_name: ops_craft_celery
    env_file:
      - ${ENV_FILE:-.env}
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    volumes:
      # - ./backend:/app
      - script_storage:/app/scripts
    networks:
      - app_network
    depends_on:
      - db
      - redis
      - backend
    command: celery -A app.tasks.executor:celery_app worker --loglevel=info

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ops_craft_frontend
    env_file:
      - ${ENV_FILE:-.env}
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL}
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app_network

volumes:
  postgres_data:
  redis_data:
  script_storage:

networks:
  app_network:
    driver: bridge
